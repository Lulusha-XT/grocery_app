{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport * as path from \"path\";\nimport {register} from \"ts-node\";\nimport yargs from \"yargs\";\n\nconst argv = yargs(process.argv.slice(2))\n  .scriptName('jasmine-ts')\n  .usage('$0 [options]')\n  .option('r', {\n    alias: 'require',\n    describe: 'Require a node module before execution',\n  })\n  .option('T', {\n    alias: 'transpile-only',\n    type: 'boolean',\n    default: false,\n    describe: '[ts-node] Use TypeScript\\'s faster `transpileModule`'\n  })\n  .option('I', {\n    alias: 'ignore',\n    describe: '[ts-node] Override the path patterns to skip compilation'\n  })\n  .option('P', {\n    alias: 'project',\n    describe: '[ts-node] Path to TypeScript JSON project file'\n  })\n  .option('C', {\n    alias: 'compiler',\n    describe: '[ts-node] Specify a custom TypeScript compiler'\n  })\n  .option('D', {\n    alias: 'ignore-diagnostics',\n    describe: '[ts-node] Ignore TypeScript warnings by diagnostic code'\n  })\n  .option('O', {\n    alias: 'compiler-options',\n    describe: '[ts-node] JSON object to merge with compiler options'\n  })\n  .option('dir', {\n    describe: '[ts-node] Specify working directory for config resolution'\n  })\n  .option('scope', {\n    describe: '[ts-node] Scope compiler to files within `cwd` only'\n  })\n  .option('files', {\n    describe: '[ts-node] Load `files`, `include` and `exclude` from `tsconfig.json` on startup'\n  })\n  .option('pretty', {\n    describe: '[ts-node] Use pretty diagnostic formatter (usually enabled by default)'\n  })\n  .option('skip-project', {\n    describe: '[ts-node] Skip reading `tsconfig.json`'\n  })\n  .option('skip-ignore', {\n    describe: '[ts-node] Skip `--ignore` checks'\n  })\n  .option('prefer-ts-exts', {\n    describe: '[ts-node] Prefer importing TypeScript files over JavaScript files'\n  })\n  .option('log-error', {\n    describe: '[ts-node] Logs TypeScript errors to stderr instead of throwing exceptions'\n  })\n  .option('no-color', {\n    describe: '[jasmine] Turn off color in spec output',\n    type: 'boolean'\n  })\n  .option('color', {\n    describe: '[jasmine] Force turn on color in spec output',\n    type: 'boolean'\n  })\n  .option('filter', {\n    describe: '[jasmine] Filter specs to run only those that match the given string'\n  })\n  .option('helper', {\n    describe: '[jasmine] Load helper files that match the given string'\n  })\n  .option('stop-on-failure', {\n    describe: '[jasmine] Stop spec execution on expectation failure',\n    type: 'boolean'\n  })\n  .option('fail-fast', {\n    describe: '[jasmine] Stop Jasmine execution on spec failure',\n    type: 'boolean'\n  })\n  .option('config', {\n    describe: '[jasmine] Path to your optional jasmine.json'\n  })\n  .option('reporter', {\n    describe: '[jasmine] Path to reporter to use instead of the default Jasmine reporter'\n  })\n  .option('random', {\n    describe: '[jasmine] Tells jasmine to run specs in semi random order or not for this run, overriding',\n    type: 'boolean'\n  })\n  .option('seed', {\n    describe: '[jasmine] TSets the randomization seed if randomization is turned on',\n    type: 'number'\n  })\n  .alias('h', 'help')\n  .alias('v', 'version')\n  .help()\n  .argv as any;\n\nconst TS_NODE_OPTIONS = [\n  'require',\n  \"transpileOnly\",\n  \"ignore\",\n  \"project\",\n  \"compiler\",\n  \"ignoreDiagnostics\",\n  \"compilerOptions\",\n  \"dir\",\n  \"scope\",\n  \"files\",\n  \"pretty\",\n  \"skipProject\",\n  \"skipIgnore\",\n  \"preferTsExts\",\n  \"logError\"\n];\n\nconst tsNodeOptions = TS_NODE_OPTIONS.reduce((options, option) => {\n  if (argv[option]) {\n    if (option === \"compilerOptions\") {\n      options[option] = JSON.parse(argv[option] as string)\n    } else if (option === 'require') {\n      if (Array.isArray(argv[option])) {\n        options[option] = argv[option]\n      } else {\n        options[option] = [argv[option]]\n      }\n    } else {\n      options[option] = argv[option]\n    }\n  }\n\n  return options;\n}, {} as any)\n\nregister(tsNodeOptions);\n\nconst Jasmine = require(\"jasmine\");\nconst Command = require(\"jasmine/lib/command\");\n\nconst jasmine = new Jasmine({projectBaseDir: path.resolve()});\nconst examplesDir = path.join(\"node_modules\", \"jasmine-core\", \"lib\", \"jasmine-core\", \"example\", \"node_example\");\nconst command = new Command(path.resolve(), examplesDir, console.log);\n\nconst JASMINE_OPTIONS = [\n  'no-color',\n  'color',\n  'filter',\n  'helper',\n  'stop-on-failure',\n  'fail-fast',\n  'config',\n  'reporter',\n  'random',\n  'seed'\n]\n\nconst commandOptions = JASMINE_OPTIONS\n  .filter(option => option in argv)\n  .map(option => {\n    switch (option) {\n      case 'color':\n        return argv.color ? '--color' : '--no-color'\n\n      case 'no-color':\n        return argv['no-color'] ? '--no-color' : undefined;\n\n      case 'stop-on-failure':\n        return argv['stop-on-failure'] ? '--stop-on-failure=true' : '--stop-on-failure=false'\n\n      case 'fail-fast':\n        return argv['fail-fast'] ? '--fail-fast=true' : '--fail-fast=false'\n\n      case 'random':\n        return argv.random? '--random=true' : '--random=false'\n\n      default:\n        return `--${option}=${argv[option]}`\n    }\n  })\n  .filter(option => option !== undefined)\n\nconst files: string[] = [];\n\nfor (const arg of argv._) {\n  if (typeof arg === 'string') {\n    if (arg.startsWith('-'))\n      break;\n\n    files.push(arg)\n  } else\n    files.push(arg.toString())\n}\n\ncommand.run(jasmine, [...commandOptions, ...files]);\n"]}